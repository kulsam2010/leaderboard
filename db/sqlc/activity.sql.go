// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: activity.sql

package db

import (
	"context"
)

const createActivity = `-- name: CreateActivity :one
INSERT INTO activities (
  name
) VALUES (
  $1
)
RETURNING id, name, created_at, updated_at
`

func (q *Queries) CreateActivity(ctx context.Context, name string) (Activity, error) {
	row := q.db.QueryRowContext(ctx, createActivity, name)
	var i Activity
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteActivity = `-- name: DeleteActivity :exec
DELETE FROM activities
WHERE id = $1
`

func (q *Queries) DeleteActivity(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteActivity, id)
	return err
}

const getActivity = `-- name: GetActivity :one
SELECT id, name, created_at, updated_at FROM activities
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetActivity(ctx context.Context, id int64) (Activity, error) {
	row := q.db.QueryRowContext(ctx, getActivity, id)
	var i Activity
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listActivities = `-- name: ListActivities :many
SELECT id, name, created_at, updated_at FROM activities
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListActivitiesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListActivities(ctx context.Context, arg ListActivitiesParams) ([]Activity, error) {
	rows, err := q.db.QueryContext(ctx, listActivities, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Activity
	for rows.Next() {
		var i Activity
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateActivity = `-- name: UpdateActivity :one
UPDATE activities
  set name = $2
WHERE id = $1
RETURNING id, name, created_at, updated_at
`

type UpdateActivityParams struct {
	ID   int64  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) UpdateActivity(ctx context.Context, arg UpdateActivityParams) (Activity, error) {
	row := q.db.QueryRowContext(ctx, updateActivity, arg.ID, arg.Name)
	var i Activity
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
