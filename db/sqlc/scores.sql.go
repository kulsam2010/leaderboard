// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: scores.sql

package db

import (
	"context"
)

const createScore = `-- name: CreateScore :one
INSERT INTO scores (
  user_id, activity_id, score
) VALUES (
  $1, $2, $3
)
RETURNING id, user_id, activity_id, score, created_at, updated_at
`

type CreateScoreParams struct {
	UserID     int32 `json:"user_id"`
	ActivityID int32 `json:"activity_id"`
	Score      int32 `json:"score"`
}

func (q *Queries) CreateScore(ctx context.Context, arg CreateScoreParams) (Score, error) {
	row := q.db.QueryRowContext(ctx, createScore, arg.UserID, arg.ActivityID, arg.Score)
	var i Score
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ActivityID,
		&i.Score,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteScore = `-- name: DeleteScore :exec
DELETE FROM scores
WHERE id = $1
`

func (q *Queries) DeleteScore(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteScore, id)
	return err
}

const getScoreForUserAndActivity = `-- name: GetScoreForUserAndActivity :one
SELECT id, user_id, activity_id, score, created_at, updated_at FROM scores
WHERE user_id = $1 and activity_id=$2 LIMIT 1
`

type GetScoreForUserAndActivityParams struct {
	UserID     int32 `json:"user_id"`
	ActivityID int32 `json:"activity_id"`
}

func (q *Queries) GetScoreForUserAndActivity(ctx context.Context, arg GetScoreForUserAndActivityParams) (Score, error) {
	row := q.db.QueryRowContext(ctx, getScoreForUserAndActivity, arg.UserID, arg.ActivityID)
	var i Score
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ActivityID,
		&i.Score,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listScores = `-- name: ListScores :many
SELECT id, user_id, activity_id, score, created_at, updated_at FROM scores
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListScoresParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListScores(ctx context.Context, arg ListScoresParams) ([]Score, error) {
	rows, err := q.db.QueryContext(ctx, listScores, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Score
	for rows.Next() {
		var i Score
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ActivityID,
			&i.Score,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateScore = `-- name: UpdateScore :one
UPDATE scores
  set score = $3
WHERE user_id = $1 and activity_id=$2
RETURNING id, user_id, activity_id, score, created_at, updated_at
`

type UpdateScoreParams struct {
	UserID     int32 `json:"user_id"`
	ActivityID int32 `json:"activity_id"`
	Score      int32 `json:"score"`
}

func (q *Queries) UpdateScore(ctx context.Context, arg UpdateScoreParams) (Score, error) {
	row := q.db.QueryRowContext(ctx, updateScore, arg.UserID, arg.ActivityID, arg.Score)
	var i Score
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ActivityID,
		&i.Score,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
