// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: score_audit.sql

package db

import (
	"context"
)

const createScoreAudit = `-- name: CreateScoreAudit :one
INSERT INTO score_audit (
  user_id, activity_id, points
) VALUES (
  $1, $2, $3
)
RETURNING id, user_id, activity_id, points, created_at
`

type CreateScoreAuditParams struct {
	UserID     int32 `json:"user_id"`
	ActivityID int32 `json:"activity_id"`
	Points     int32 `json:"points"`
}

func (q *Queries) CreateScoreAudit(ctx context.Context, arg CreateScoreAuditParams) (ScoreAudit, error) {
	row := q.db.QueryRowContext(ctx, createScoreAudit, arg.UserID, arg.ActivityID, arg.Points)
	var i ScoreAudit
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ActivityID,
		&i.Points,
		&i.CreatedAt,
	)
	return i, err
}

const getScoreAudit = `-- name: GetScoreAudit :one
SELECT id, user_id, activity_id, points, created_at FROM score_audit
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetScoreAudit(ctx context.Context, id int64) (ScoreAudit, error) {
	row := q.db.QueryRowContext(ctx, getScoreAudit, id)
	var i ScoreAudit
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ActivityID,
		&i.Points,
		&i.CreatedAt,
	)
	return i, err
}

const getScoreAuditForUserAndActivity = `-- name: GetScoreAuditForUserAndActivity :many
SELECT id, user_id, activity_id, points, created_at FROM score_audit
WHERE user_id = $1 and activity_id=$2 LIMIT 1
`

type GetScoreAuditForUserAndActivityParams struct {
	UserID     int32 `json:"user_id"`
	ActivityID int32 `json:"activity_id"`
}

func (q *Queries) GetScoreAuditForUserAndActivity(ctx context.Context, arg GetScoreAuditForUserAndActivityParams) ([]ScoreAudit, error) {
	rows, err := q.db.QueryContext(ctx, getScoreAuditForUserAndActivity, arg.UserID, arg.ActivityID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ScoreAudit
	for rows.Next() {
		var i ScoreAudit
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ActivityID,
			&i.Points,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
